{
  "name": "zerossl",
  "version": "1.0.0",
  "description": "Steps: - use api.zerossl.com/certificates?access_key=d381b2f56b6927ba8a2f52ec5f4dd35c& - for all expired or expiring soon certificates - issue a new certificate for that domain - download the certificate - upload the certificate to the server - use api.zerossl.com/certificates/4cf8a21ca181533e44283d6b3a9e3ce1/challenges?access_key=d381b2f56b6927ba8a2f52ec5f4dd35c      with   validation_method = HTTPS_CSR_HASH - after the certificate is issued, download it - upload it to the server /etc/ssl/, unzip it - delete the old certificate cat certificate.crt ca_bundle.crt >> certificateBundle.crt - nginx -t && nginx -s reload",
  "main": "index.js",
  "scripts": {
    "dev": "nodemon",
    "test": "echo \"Error: no test specified\" && exit 1"
  },
  "nodemonConfig": {
    "watch": [
      "src"
    ],
    "ext": "ts,json",
    "ignore": [
      "src/**/*.spec.ts"
    ],
    "exec": "ts-node ./src/sslCronJob.ts"
  },
  "keywords": [],
  "author": "",
  "license": "ISC",
  "dependencies": {
    "@types/node": "^20.11.19",
    "@types/node-forge": "^1.3.11",
    "axios": "^1.6.7",
    "fs": "^0.0.1-security",
    "node-forge": "^1.3.1",
    "ts-node": "^10.9.2",
    "typescript": "^5.3.3"
  },
  "devDependencies": {
    "@typescript-eslint/eslint-plugin": "^7.0.1",
    "@typescript-eslint/parser": "^7.0.1",
    "eslint": "^8.56.0",
    "nodemon": "^3.0.3"
  }
}
